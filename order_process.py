from itertools import product
from lib2to3.fixes.fix_input import context
from pyexpat.errors import messages

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import CallbackContext

from buttons import date_, period_, quantity_, edit_entity_, show_confirm_
from db_operations import get_product_name
from utils import CHAT_ORDERS


async def callback_query_handler(update: Update, context: CallbackContext):
    return await ordering(update, context)


async def ordering(update: Update, context: CallbackContext):
    """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞."""
    user_input = None
    print(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ? - {context.user_data.get('edit_order', '–ù–µ—Ç')}")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫–∞–∫ –æ—Ç callback_query, —Ç–∞–∫ –∏ –æ—Ç message
    if update.callback_query:
        query = update.callback_query
        data = query.data
        message = query.message  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ callback_query
    elif update.message:
        user_input = update.message.text.strip()
        message = update.message  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞

    order_step = context.user_data.get('order_step', 'quantity')

    handlers = {
        'quantity': handle_quantity,
        'address': handle_address,
        'date': handle_date,
        'period': handle_period,
        'phone': handle_phone,
        'confirmation': handle_confirmation,
        'edit': handle_edit,
        'show_confirmation': show_confirmation
    }

    handler = handlers.get(order_step)
    if handler:
        return await handler(update, context, user_input)

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω —à–∞–≥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if message:
        await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    return False


async def send_order_notification(update: Update,context: CallbackContext):

    print(f"handle_quantity user_data: {context.user_data}")
    user_data = context.user_data
    order_details = (
        f"üîî <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>! \n\n"
        f"<b>–¢–æ–≤–∞—Ä:</b> {get_product_name(user_data.get('edit_product_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))}\n"
        f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {user_data['order_quantity']}\n"
        f"<b>–ê–¥—Ä–µ—Å:</b> {user_data['order_address']}\n"
        f"<b>–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {user_data['order_date']}\n"
        f"<b>–ü–µ—Ä–∏–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {user_data['order_period']}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_data['order_phone']}\n\n"
        f"<b>–¢–µ–ª–µ–≥—Ä–∞–º:</b> {update.effective_user.name}"
    )
    await context.bot.send_message(
        chat_id=CHAT_ORDERS,
        text=order_details,
        parse_mode=ParseMode.HTML
    )


async def handle_quantity(update, context, user_input=None):
    print(f"handle_quantity user_data: {context.user_data}, data: {update.callback_query.data}")
    query = update.callback_query
    data = query.data
    context.user_data['current_step'] = 'quantity'
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_quantity = context.user_data.get('order_quantity', 1)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∏ —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    if data == "increase":
        current_quantity += 1
    elif data == "decrease" and current_quantity > 1:
        current_quantity -= 1
    elif data == "confirm_quantity":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['order_quantity'] = current_quantity

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if context.user_data.get('edit_order', False):  # –§–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
            context.user_data['order_step'] = 'show_confirmation'
            await show_confirmation(update, context)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∞–¥—Ä–µ—Å–∞
            context.user_data['order_step'] = 'address'
            await query.message.reply_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {current_quantity}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏."
            )

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback
        await query.answer()
        return True
    elif data == "cancel":
        # –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        await query.message.reply_text("–í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–º–µ–Ω—ë–Ω.")
        context.user_data.clear()  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await query.answer()
        return True

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['order_quantity'] = current_quantity
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
    keyboard = quantity_(current_quantity)
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await query.edit_message_reply_markup(reply_markup=keyboard)
    await query.answer()
    return True


async def handle_address(update, context, user_input=None):
    print(f"handle_address user_data: {context.user_data}, data: {'empty'}")
    context.user_data['current_step'] = 'date'
    if update.callback_query:
        query = update.callback_query
        data = query.data

        if data == "edit_address":
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞, —Ç–æ –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å
            await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.")
            context.user_data['order_step'] = 'address'  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞
            await query.answer()
            return True
    elif user_input:
        context.user_data['order_address'] = user_input
        # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        if context.user_data.get('edit_order', False):
            context.user_data['order_step'] = 'confirmation'
            await show_confirmation(update, context)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        else:
            context.user_data['order_step'] = 'date'
            keyboard = date_()
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=keyboard)
        return True

    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.")
    return False


async def handle_date(update, context, user_input=None):
    print(f"handle_date user_data: {context.user_data}, data: {update.callback_query.data}")
    context.user_data['current_step'] = 'date'
    query = update.callback_query
    data = query.data

    if data == "cancel":
        context.user_data.clear()
        await query.message.reply_text("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return True

    elif data == "back":
        context.user_data['order_step'] = 'address'
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.")
        return True

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    context.user_data['order_date'] = data

    if context.user_data.get('edit_order', False):  # –ï—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π –¥–∞—Ç—ã
        buttons = date_()
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:",
            reply_markup=buttons
        )
        context.user_data['order_date'] = None
        context.user_data['order_step'] = 'show_confirmation'
        return True

    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞


        context.user_data['order_step'] = 'period'
        await query.answer()
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏:",
            reply_markup=period_()
        )
    return True


async def handle_period(update, context, user_input=None):
    print(f"handle_period user_data: {context.user_data}, data: {update.callback_query.data}")
    query = update.callback_query
    data = query.data
    context.user_data['current_step'] = 'period'
    buttons = period_()

    if data == "cancel":
        context.user_data.clear()
        await query.message.reply_text("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return True
    elif data == "back":
        context.user_data['order_step'] = 'date'
        keyboard = date_()
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=keyboard)
        return True

    context.user_data['order_period'] = period_(data)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if context.user_data.get('edit_order', False):  # –§–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è


        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:",
            reply_markup=buttons
        )
        context.user_data['order_step'] = 'show_confirmation'
        return True
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        context.user_data['order_step'] = 'phone'
        await query.answer()
        await query.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {context.user_data['order_period']}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
        )

    return True

async def handle_phone(update, context, user_input=None):
    print(f"handle_phone user_data: {context.user_data}, data: 'empty'")
    context.user_data['current_step'] = 'phone'

    # message = update.message if update.message else update.callback_query.message
    if update.callback_query:
        query = update.callback_query
        data = query.data
        if data == 'edit_phone':
            await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
            context.user_data['order_step'] = 'phone'  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –Ω–æ–≤–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            await query.answer()
            return True

    elif user_input:
        user_input = user_input.strip()
        is_valid = (user_input.startswith('+7') and len(user_input) == 12 and user_input[1:].isdigit()) or \
           (user_input.startswith('8') and len(user_input) == 11 and user_input.isdigit())

        if not is_valid:
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                "+79998887766\n"
                "89998887766"
            )
            return False
        context.user_data['order_phone'] = user_input or ''


    context.user_data['order_step'] = 'confirmation'
    await show_confirmation(update, context)

    return True

async def show_confirmation(update, context, user_input=None):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —ç—Ç–∞–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."""
    # print('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>show confirm')
    order_date = ''
    order_period = ''
    order_quantity = context.user_data.get('order_quantity',0)
    phone = context.user_data.get('order_phone',911)
    address = context.user_data.get('order_address','–¢—Ä–∏–¥–µ–≤—è—Ç–æ–µ —Ü–∞—Ä—Å—Ç–≤–æ')
    product_name = get_product_name(context.user_data.get('edit_product_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if update.callback_query:

        if context.user_data['current_step'] == 'date':
            order_date = update.callback_query.data
            context.user_data['order_date'] = order_date
        else:
            order_date = context.user_data.get('order_date')

        if context.user_data['current_step'] == 'period':
            order_period = period_(update.callback_query.data)
            context.user_data['order_period'] = order_period
        else:
            order_period = context.user_data.get('order_period')
    else:
        order_date = context.user_data.get('order_date')
        order_period = context.user_data.get('order_period')
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    order_details = (
        f"–¢–æ–≤–∞—Ä: {product_name}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order_quantity}\n"
        f"–ê–¥—Ä–µ—Å: {address}\n"
        f"–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {order_date}\n"
        f"–ü–µ—Ä–∏–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏: {order_period}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
    )

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã


    context.user_data['order_step'] = 'confirmation'
    if update.callback_query:
        query = update.callback_query
        await query.message.reply_text(f"–í–∞—à –∑–∞–∫–∞–∑:\n\n{order_details}", reply_markup=show_confirm_())
        await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ —á–µ—Ä–µ–∑ callback)
        await update.message.reply_text(f"–í–∞—à –∑–∞–∫–∞–∑:\n\n{order_details}", reply_markup=show_confirm_())

async def handle_confirmation(update, context, user_input=None):
    query = update.callback_query
    data = query.data

    if data == "confirm_order":
        await update.callback_query.message.reply_text("–í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –°–ø–∞—Å–∏–±–æ!")
        await send_order_notification(update,context)
        context.user_data.clear()
        return True
    elif data == "edit_order":
        context.user_data['order_step'] = 'edit'
        await query.message.reply_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=edit_entity_())
        return True
    elif data == "cancel":
        context.user_data.clear()
        await query.message.reply_text("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return True

async def handle_edit(update, context, user_input=None):
    query = update.callback_query
    data = query.data
    print(f"data in handle edit -  {data}")
    edit_steps = {
        "edit_quantity": "quantity",
        "edit_address": "address",
        "edit_date": "date",
        "edit_period": "period",
        "edit_phone": "phone"
    }

    if data in edit_steps:
        context.user_data['order_step'] = edit_steps[data]
        context.user_data['edit_order'] = True
        await ordering(update, context)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–º—É —à–∞–≥—É
        return True
